digraph "clusternormale.py" {
	graph [label="normale.py"]
	1 [label="import math
import random
def calcolaNormale(n):...
programName = 'Tabella Normale'
i = 0.0
h = 0.01
simpson = 0.0
lista = []
if __name__ == '__main__':
"]
	6 [label="print('Inizio elaborazione di ' + programName)
"]
	"6_calls" [label=print
 shape=box]
	6 -> "6_calls" [label=calls style=dashed]
	8 [label="while i <= 4:
"]
	9 [label="a = calcolaNormale(i)
b = calcolaNormale(i + 0.005)
c = calcolaNormale(i + 0.01)
simpson += h / 6 * (a + 4 * b + c)
lista.append(simpson)
i += 0.01
"]
	"9_calls" [label="calcolaNormale
calcolaNormale
calcolaNormale
lista.append
" shape=box]
	9 -> "9_calls" [label=calls style=dashed]
	9 -> 8 [label=""]
	8 -> 9 [label="i <= 4
"]
	10 [label="z = int(input('Inserisci valore (0<=Z<=4): '))
nRip = 100000
count = 0
i = 0
sqrN = 1 / math.sqrt(2 * math.pi)
"]
	"10_calls" [label="int
math.sqrt
" shape=box]
	10 -> "10_calls" [label=calls style=dashed]
	11 [label="while i < nRip:
"]
	12 [label="x = random.uniform(0, z)
y = random.uniform(0, sqrN)
if y <= calcolaNormale(x):
"]
	"12_calls" [label="random.uniform
random.uniform
" shape=box]
	12 -> "12_calls" [label=calls style=dashed]
	14 [label="count += 1
"]
	15 [label="i += 1
"]
	15 -> 11 [label=""]
	14 -> 15 [label=""]
	12 -> 14 [label="y <= calcolaNormale(x)
"]
	12 -> 15 [label="(y > calcolaNormale(x))
"]
	11 -> 12 [label="i < nRip
"]
	13 [label="print(count / nRip * z * sqrN)
print(lista)
"]
	"13_calls" [label="print
print
" shape=box]
	13 -> "13_calls" [label=calls style=dashed]
	7 [label="print('Fine elaborazione')
"]
	"7_calls" [label=print
 shape=box]
	7 -> "7_calls" [label=calls style=dashed]
	13 -> 7 [label=""]
	11 -> 13 [label="(i >= nRip)
"]
	10 -> 11 [label=""]
	8 -> 10 [label="(i > 4)
"]
	6 -> 8 [label=""]
	1 -> 6 [label="__name__ == '__main__'
"]
	1 -> 7 [label="(__name__ != '__main__')
"]
	subgraph clustercalcolaNormale {
		graph [label=calcolaNormale]
		3 [label="result = 1 / math.sqrt(2 * math.pi) * math.pow(math.e, -1 / 2 * math.pow(n, 2))
return result
"]
		"3_calls" [label="math.sqrt
math.pow
" shape=box]
		3 -> "3_calls" [label=calls style=dashed]
	}
}
